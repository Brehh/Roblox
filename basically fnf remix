function xd(args,self)
    
end

function xd2(args,self)
    if self.Name == 'Notes' then
        args[2] = 0
    end
end


_G.a = xd
_G.b = xd2




local mt = getrawmetatable(game)
    local oldNamecall = mt.__namecall
    setreadonly(mt, false)

    mt.__namecall = newcclosure(function(self, ...)
        -- Capture the method and arguments
        local method = getnamecallmethod()
        local args = {...}
        
        -- Ensure it's the InvokeServer method and the correct RemoteFunction
        if method == "InvokeServer" then
            _G.a(args,self)
        elseif method == 'FireServer' then
            _G.b(args,self)
        end
        return oldNamecall(self, unpack(args))
    end)

    -- Set the metatable back to readonly
    setreadonly(mt, true)


print('--------------------------------------------------')
print('Runned BRO')

local inputs = getrenv()._G.Settings.Inputs
local player = game:GetService("Players").LocalPlayer
local side = nil
local playergui = nil
local RunService = game:GetService("RunService")
local Marked = {}
_G.diff = 0



local utf8 = {
	["A"] = 0x41,
	["B"] = 0x42,
	["C"] = 0x43,
	["D"] = 0x44,
	["E"] = 0x45,
	["F"] = 0x46,
	["G"] = 0x47,
	["H"] = 0x48,
	["I"] = 0x49,
	["J"] = 0x4A,
	["K"] = 0x4B,
	["L"] = 0x4C,
	["M"] = 0x4D,
	["N"] = 0x4E,
	["O"] = 0x4F,
	["P"] = 0x50,
	["Q"] = 0x51,
	["R"] = 0x52,
	["S"] = 0x53,
	["T"] = 0x54,
	["U"] = 0x55,
	["V"] = 0x56,
	["W"] = 0x57,
	["X"] = 0x58,
	["Y"] = 0x59,
	["Z"] = 0x5A,
	["Space"] = 0x20,
}

function pressKey(key)
	key = string.upper(key)
	keypress(utf8[key])
end

function releaseKey(key)
    key = string.upper(key)
	keyrelease(utf8[key])
end

local function GetNumber(input)
    local numberString = input:match("%d+") -- Extracts the numeric part of the string
    if numberString then
        return tostring(numberString) -- Converts the extracted string to a number
    end
    return nil -- Returns nil if no number is found
end

function getmatch()
    for i,v in next, player.PlayerGui.Main:GetChildren() do
        if v.Name == 'MatchFrame' and #v:GetChildren() > 3 then
            return v
        end
    end
end

function getside()
    while task.wait() do
        if player.File.Ready.Value == true then
            print(player.File.CurrentPlayer.Value.Name)
            side = GetNumber(player.File.CurrentPlayer.Value.Name)
            playergui = getmatch()['KeySync' .. side]
            repeat 
            task.wait()
            until player.File.Ready.Value == false
            side = nil
            playergui = nil
            table.clear(Marked)
        end
    end
end

function gethold(note)
    for i,v in next, note.Parent:GetChildren() do
        if v.ClassName == 'Frame' and v.Name == note.Name and v.Size.Y.Scale ~= 0 then
            return v
        end
    end
end

task.defer(getside)



RunService.Heartbeat:Connect(function()
    if side and playergui then
        for i = 1,4 do
            coroutine.wrap(function()
                for a,v in next, playergui['Arrow'..i].Notes:GetChildren() do
                    if #v:GetChildren() == 0 then
                        coroutine.wrap(function()
                            if not Marked[v.Name] then
                                coroutine.wrap(function()
                                    while task.wait(0) do
                                        Marked[v.Name] = true
                                        local diff = v.Position.Y.Scale
                
                                        if diff >= _G.diff then
                                            local keys = inputs[tonumber(i)]
                                            local hold = gethold(v)
                                            pressKey(keys)
                                            if hold then
                                                repeat
                                                task.wait()
                                                until hold.Position.Y.Scale > (hold.Size.X.Scale - hold.Size.Y.Scale)
                                            end
                                            releaseKey(keys)
                                            break
                                        end
                                    end
                                end)()
                            end
                        end)()
                    end
                end
            end)()
        end
    end
end)
