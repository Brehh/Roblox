_G.a = true
local marked = {}
local delayed = 5
local localplayer = game.Players.LocalPlayer
local vim = game:GetService('VirtualInputManager')
local RunService = game:GetService("RunService")
local keysdata = {}
local inputData = game:GetService("ReplicatedStorage").Remotes.DataF:InvokeServer()

for i,v in next,inputData[1].Inputs do
    if i <= 4 then
        keysdata[i] = v
    end
end

-- Create the GUI to change the 'delayed' value and to open/close the GUI
local guiVisible = true

local function createGui()
    local ScreenGui = Instance.new("ScreenGui")
    ScreenGui.Name = "DelayChangerGui"
    ScreenGui.Parent = localplayer:WaitForChild("PlayerGui")

    -- Toggle Button to open/close the GUI
    local ToggleButton = Instance.new("TextButton")
    ToggleButton.Size = UDim2.new(0.1, 0, 0.05, 0)
    ToggleButton.Position = UDim2.new(0.85, 0, 0.05, 0)
    ToggleButton.Text = "Hide"
    ToggleButton.TextScaled = true
    ToggleButton.BackgroundColor3 = Color3.fromRGB(120, 120, 120)
    ToggleButton.Parent = ScreenGui

    -- Frame to hold everything
    local MainFrame = Instance.new("Frame")
    MainFrame.Size = UDim2.new(0.3, 0, 0.2, 0)
    MainFrame.Position = UDim2.new(0.35, 0, 0.3, 0)
    MainFrame.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    MainFrame.Parent = ScreenGui

    -- Label to display the current 'delayed' value
    local DelayLabel = Instance.new("TextLabel")
    DelayLabel.Size = UDim2.new(1, 0, 0.3, 0)
    DelayLabel.Position = UDim2.new(0, 0, 0, 0)
    DelayLabel.Text = "Delay: " .. tostring(delayed)
    DelayLabel.TextScaled = true
    DelayLabel.BackgroundColor3 = Color3.fromRGB(80, 80, 80)
    DelayLabel.Parent = MainFrame

    -- Button to increase 'delayed' value by 0.25
    local IncreaseButton = Instance.new("TextButton")
    IncreaseButton.Size = UDim2.new(1, 0, 0.3, 0)
    IncreaseButton.Position = UDim2.new(0, 0, 0.35, 0)
    IncreaseButton.Text = "Increase Delay"
    IncreaseButton.TextScaled = true
    IncreaseButton.BackgroundColor3 = Color3.fromRGB(120, 120, 120)
    IncreaseButton.Parent = MainFrame

    -- Button to decrease 'delayed' value by 0.25
    local DecreaseButton = Instance.new("TextButton")
    DecreaseButton.Size = UDim2.new(1, 0, 0.3, 0)
    DecreaseButton.Position = UDim2.new(0, 0, 0.7, 0)
    DecreaseButton.Text = "Decrease Delay"
    DecreaseButton.TextScaled = true
    DecreaseButton.BackgroundColor3 = Color3.fromRGB(120, 120, 120)
    DecreaseButton.Parent = MainFrame

    -- Toggle the visibility of the MainFrame when the button is pressed
    ToggleButton.MouseButton1Click:Connect(function()
        guiVisible = not guiVisible
        MainFrame.Visible = guiVisible
        ToggleButton.Text = guiVisible and "Hide" or "Show"
    end)

    -- Update delay value when button is pressed
    IncreaseButton.MouseButton1Click:Connect(function()
        delayed = delayed + 0.1
        DelayLabel.Text = "Delay: " .. tostring(delayed)
    end)

    DecreaseButton.MouseButton1Click:Connect(function()
        delayed = delayed - 0.1 -- Can go negative now
        DelayLabel.Text = "Delay: " .. tostring(delayed)
    end)

    -- Set initial visibility
    MainFrame.Visible = true
end

createGui() -- Create the GUI

-- Function to press keys with better handling
local function pressKey(key, state)
    if key and Enum.KeyCode[key] then
        vim:SendKeyEvent(state, Enum.KeyCode[key], false, game)
    else
        warn("Invalid key provided: ", key)
    end
end

local xddd

function xd1(key, arrow)
    -- Identify current player and assign the appropriate index
    if tostring(localplayer.File.CurrentPlayer.Value) == 'Player1' then
        xddd = 1
    elseif tostring(localplayer.File.CurrentPlayer.Value) == 'Player2' then
        xddd = 2
    end
    
    local matchFrame = localplayer.PlayerGui.Main.MatchFrame['KeySync' .. xddd]['Arrow' .. arrow]
    if not matchFrame then return end -- Exit if matchFrame doesn't exist

    -- Iterate over the notes in the arrow key sync
    for _, v in ipairs(matchFrame.Notes:GetChildren()) do        
            if v.ClassName == 'ImageLabel' and v.Parent.Parent.AbsolutePosition.Y + (v.Parent.Parent.AbsoluteSize.Y / 2) - (v.AbsolutePosition.Y + (v.AbsoluteSize.Y / 2)) <= delayed and not table.find(marked, v) then
                local start2 = v.Parent.Parent.AbsolutePosition.Y + (v.Parent.Parent.AbsoluteSize.Y / 2)
                marked[#marked + 1] = v
                pressKey(key, true)

                -- Handle hold events
                for _, b in ipairs(v.Parent:GetChildren()) do
                        task.defer(function()
                            if b.Name == v.Name and b.ClassName == 'Frame' then
                                if b.Hold.End.AbsolutePosition.X == 0 then
                                    task.wait()
                                else
                                    repeat
                                        task.wait()
                                        local holddiff = start2 - b.Hold.AbsolutePosition.Y
                                    until holddiff <= delayed
                                end
                                pressKey(key, false)
                            end
                        end)
                end
            end
    end
end

print('Script is running')

-- Use RunService to repeatedly check player inputs during the match
RunService.RenderStepped:Connect(function()
    if localplayer:FindFirstChild('CurrentMatch') and _G.a then
        if keysdata and keysdata[1] then
            for i = 1, 4 do
                task.defer(function()
                    xd1(keysdata[i], i)
                end)
            end
        else
            warn("Failed to get input data from server.")
        end
    else
        task.wait()
        table.clear(marked)
    end
end)
