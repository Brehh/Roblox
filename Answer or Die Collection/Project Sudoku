
local vim = game:GetService('VirtualInputManager')

function getpos(obj)
    local xddd = obj.AbsolutePosition + obj.AbsoluteSize / 2

    return {xddd.X,xddd.Y+50}
end



local grid = {
    
}

local row = 9

local function deepCopy(original)
	local copy = {}
	for k, v in pairs(original) do
		if type(v) == "table" then
			v = deepCopy(v)
		end
		copy[k] = v
	end
	return copy
end

for i,v in next,game:GetService("Players").LocalPlayer.PlayerGui.Interface.Background.Screens.Gameplay.PlayingArea.DynamicBoard.Board:GetChildren() do
    if v:IsA('TextButton') then
        local check = ((tonumber(v.Name)-1) // row) + 1
        if not grid[check] then
            grid[check] = {}
        end
        if #v.Text == 1 then
            table.insert(grid[check],tonumber(v.Text))
        else
            table.insert(grid[check],0)
        end
    end
end

local grid2 = deepCopy(grid)

table.clone(grid2,grid)

local SudokuSolver = {}

-- Helper function to print the grid (for debugging in output)
function SudokuSolver.printGrid(grid)
    for i = 1, 9 do
        local rowStr = ""
        for j = 1, 9 do
            rowStr = rowStr .. grid[i][j] .. " "
        end
        print(rowStr)
    end
end

-- Function to check if a number can be legally placed in a given cell
function SudokuSolver.isSafe(grid, row, col, num)
    -- Check row
    for x = 1, 9 do
        if grid[row][x] == num then
            return false
        end
    end

    -- Check column
    for x = 1, 9 do
        if grid[x][col] == num then
            return false
        end
    end

    -- Check 3x3 subgrid
    local startRow = row - (row - 1) % 3
    local startCol = col - (col - 1) % 3
    for i = 0, 2 do
        for j = 0, 2 do
            if grid[startRow + i][startCol + j] == num then
                return false
            end
        end
    end

    return true
end

-- Main backtracking solver function
function SudokuSolver.solve(grid)
    local row, col
    local isEmpty = false

    -- Find the first empty cell
    for i = 1, 9 do
        for j = 1, 9 do
            if grid[i][j] == 0 then
                row = i
                col = j
                isEmpty = true
                break
            end
        end
        if isEmpty then
            break
        end
    end

    -- If no empty cell, puzzle is solved
    if not isEmpty then
        return true
    end

    -- Try numbers 1 through 9
    for num = 1, 9 do
        if SudokuSolver.isSafe(grid, row, col, num) then
            grid[row][col] = num -- Try the number

            if SudokuSolver.solve(grid) then -- Recurse
                return true -- Solution found
            end

            grid[row][col] = 0 -- Backtrack: undo the choice if it didn't lead to a solution
        end
    end

    return false -- No number worked, trigger backtracking in previous call
end

-- Example Usage (you'd call this from another script or based on a game event)
function SudokuSolver.runSolver(puzzleGrid)
    local startTime = tick()
    if SudokuSolver.solve(puzzleGrid) then
        print("Sudoku Solved!")
        SudokuSolver.printGrid(puzzleGrid)
        local endTime = tick()
        print("Time taken: " .. string.format("%.4f", endTime - startTime) .. " seconds")
        return puzzleGrid -- Return the solved grid
    else
        print("No solution exists for this Sudoku.")
        return nil -- Or return the original grid, or an error indicator
    end
end

local solvedPuzzle = SudokuSolver.runSolver(grid)

if solvedPuzzle then
    print("--- Solved Puzzle from Script ---")
else
    print("Could not solve the puzzle from script.")
end

local numbertab = {}
for i,v in next,game:GetService("Players").LocalPlayer.PlayerGui.Interface.Background.Screens.Gameplay.PlayingArea.DynamicBoard.SidePanel.Tools.Numbers:GetChildren() do
    if v:IsA('TextButton') then
        numbertab[tonumber(v.Name)] = v
    end
end


for i,v in next,grid2 do
    for j,k in next,v do
        if k == 0 then
            local count = (i-1)*9 + j
            local gotnum = numbertab[grid[i][j]]
            local gotcurrent = game:GetService("Players").LocalPlayer.PlayerGui.Interface.Background.Screens.Gameplay.PlayingArea.DynamicBoard.Board[tostring(count)]
            local currentpost = getpos(gotcurrent)
            local numpost = getpos(gotnum)
            repeat
                vim:SendMouseButtonEvent(numpost[1], numpost[2], 0, true, game, 1)
                task.wait(0.05)
                vim:SendMouseButtonEvent(numpost[1], numpost[2], 0, false, game, 1)
                wait(0.05)
                vim:SendMouseButtonEvent(currentpost[1], currentpost[2], 0, true, game, 1)
                task.wait(0.05)
                vim:SendMouseButtonEvent(currentpost[1], currentpost[2], 0, false, game, 1)
                task.wait(0.05)
            until #gotcurrent.Text == 1
        end
    end
end

print('AllDone')
