print('WORK')

game.Players.LocalPlayer.PlayerGui.PermGui.Stats.Stats.sse.wa.Value = false
game:GetService("ReplicatedStorage").UITrada.SY:Destroy()

local folder

if not game:GetService("ReplicatedStorage"):FindFirstChild('Player') then
    folder = Instance.new('Folder',game:GetService("ReplicatedStorage"))
    folder.Name = 'Player'
else
    folder = game:GetService("ReplicatedStorage"):FindFirstChild('Player')
end



local s_rs = game:GetService("RunService")
local l_plr = game:GetService("Players").LocalPlayer
local vim = game:GetService('VirtualInputManager')
local gameSettings = UserSettings().GameSettings
local inFullscreen = gameSettings:InFullScreen()
local l_humrp = l_plr.Character and l_plr.Character:FindFirstChild("HumanoidRootPart")
local l_hum = l_plr.Character and l_plr.Character:FindFirstChild("Humanoid")
local RunService = game:GetService("RunService")

local mychar = l_plr.Character

local resp_con = l_plr.CharacterAdded:Connect(function(c)
    mychar = c
    l_humrp = c:WaitForChild("HumanoidRootPart",3)
    l_hum = c:WaitForChild("Humanoid",3)
end)







local function dnec(signal) 
    local s = {}
    for _, con in ipairs(getconnections(signal)) do 
        local func = con.Function
        if (func and islclosure(func)) then
            if (not is_synapse_function(func)) then 
                s[#s+1] = con
                con:Disable() 
            end
        end
    end
    return s
end

local speed_amnt = 0.1
local bef = game:GetService("ReplicatedStorage").Stats[l_plr.Name].WHERE
local t = game:GetService("ReplicatedStorage").Stats[l_plr.Name].KiPending.WZ
local bruh = game:GetService("ReplicatedStorage").Stats[l_plr.Name].KiPending
local fight = game:GetService("ReplicatedStorage").Stats[l_plr.Name]:FindFirstChild('M1V1')
local check = false



    do
    local a,b

function getplayer(mode)
    if mode == 1 then
        _G.mode = 2  
        for i,v in next, game.Players:GetChildren() do
            v.Character.Parent = workspace
            if v ~= game.Players.LocalPlayer and v.Name ~= fight.ALLY.Value and v.Name ~= fight.E1.Value and v.Name ~= fight.E2.Value then
                v.Character.Parent = folder
            elseif v ~= game.Players.LocalPlayer then
                for _,char in next, v.Character:GetChildren() do
                    if char:IsA('MeshPart') then
                        char.Transparency = 0
                    end
                    if char.Name:find('Glove') and char:FindFirstChildWhichIsA('SpecialMesh') and char:FindFirstChildWhichIsA('Part') then
                        local Neon = char:FindFirstChildWhichIsA('Part')
                        local SpecialMesh1 = char:FindFirstChildWhichIsA('SpecialMesh')
                        if not Neon:FindFirstChildWhichIsA('SpecialMeshMesh') and char:FindFirstChild('BodyGloveEquip') and #char:FindFirstChild('BodyGloveEquip'):GetChildren() == 2 then
                            SpecialMesh1.MeshId = 'rbxassetid://4331789696'
                        end
                    end
                end
                
                if v.Character.Gloves1:FindFirstChildWhichIsA('Decal') then
                    v.Character.Gloves1:FindFirstChildWhichIsA('Decal'):Destroy()
                end
                if v.Character.Gloves2:FindFirstChildWhichIsA('Decal') then
                    v.Character.Gloves2:FindFirstChildWhichIsA('Decal'):Destroy()
                end
                if v.Character:FindFirstChild('BodyGloveEquip') then
                    v.Character:FindFirstChild('BodyGloveEquip'):Destroy()
                end
                if v.Character.Gloves1:FindFirstChildWhichIsA('SpecialMesh') then
                    v.Character.Gloves1:FindFirstChildWhichIsA('SpecialMesh').MeshId = 'rbxassetid://4331789696'
                end

            end
        end
    elseif mode == 2 then
        for i,v in next, folder:GetChildren() do
            _G.mode = 1
            v.Parent = workspace
        end
    end
end

if not _G.mode then
    _G.mode = 1

    local Players = game:GetService("Players")

    Players.PlayerAdded:Connect(function(player)
        player.CharacterAdded:Connect(function(character)
            if _G.mode == 2 then
                player.Character.Parent = folder
            end
        end)
    end)

    for i,v in next,game.Players:GetChildren() do
        if v ~= game.Players.LocalPlayer then
            v.CharacterAdded:Connect(function(character)
                if _G.mode == 2 then
                    v.Character.Parent = folder
                end
            end)
        end
    end
end

fight:GetPropertyChangedSignal("Value"):Connect(function()
    if fight.Value == 'A' then
        getplayer(2)
    else
        getplayer(1)
    end
end)

bef:GetPropertyChangedSignal("Value"):Connect(function()
    if bef.Value == 'A' then
            s_rs:UnbindFromRenderStep("speed")
            
            for i,v in ipairs(a) do 
                v:Enable()
            end
            for i,v in ipairs(b) do 
                v:Enable()
            end
            check = false
    end
end)


    t:GetPropertyChangedSignal("Value"):Connect(function()
        if t.Value == false and check == false then
            a = dnec(l_humrp.Changed)
            b = dnec(l_humrp:GetPropertyChangedSignal("CFrame"))
            
            s_rs:BindToRenderStep("speed",2000,function(dt)
                l_humrp.CFrame += l_hum.MoveDirection*dt*5*speed_amnt
            end)
            check = true
        elseif t.Value == true then
            s_rs:UnbindFromRenderStep("speed")
            
            for i,v in ipairs(a) do 
                v:Enable()
            end
            for i,v in ipairs(b) do 
                v:Enable()
            end
            check = false
        end
    end)
end

bruh:GetPropertyChangedSignal("Value"):Connect(function()
 if bruh.Value == -2 then
  while bruh.Value == -2 do
   game:GetService("ReplicatedStorage").UseItem:FireServer("Use")
   task.wait()
  end
 end
end)

print('YES')
local PlayerGui = game:GetService("Players").LocalPlayer.PlayerGui


PlayerGui.ChildAdded:Connect(function(Object)
    local getobj
    local getbestdex = -99999999999999999
    local e = 0
    local b = 0
    if Object.Name == 'VS' then
        
        wait(0.2)
        while e ~= 1 do
            b = 0
            getbestdex = -99999999999999999
            for i,v in next,Object:WaitForChild('ZN'):GetChildren() do
            if v.MC.MX.Value > 0 and v.ZIndex > getbestdex then
              getbestdex = v.ZIndex
              getobj = v
            end
             
            if getobj ~= nil then
            local obj = getobj.MC.TV
                while b ~= 1 do
                 if getobj.MC.MX.Value > 0 then
                    b = 0
                    local xddd = obj.AbsolutePosition + obj.AbsoluteSize / 2
                    if not inFullscreen then
                        vim:SendMouseButtonEvent(xddd.X,xddd.Y+50, 0, true, game, 1)
                        vim:SendMouseButtonEvent(xddd.X,xddd.Y+50, 0, false, game, 1)
                    else
                        vim:SendMouseButtonEvent(xddd.X,xddd.Y, 0, true, game, 1)
                        vim:SendMouseButtonEvent(xddd.X,xddd.Y, 0, false, game, 1)
                    end
                    wait(0.06)
                 else
                    b = 1
                    wait()
                 end
                end
                wait()
            else
            e = 1
            wait(0.1)
            end
            end
        end
    end
end)

-- Gui to Lua
-- Version: 3.2 Improved
print('AYO - Improved Script Initializing')

-- Services
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local LocalPlayer = Players.LocalPlayer
local PlayerGui2 = LocalPlayer:WaitForChild("PlayerGui")

-- Instances:
local ScreenGui = Instance.new("ScreenGui")
local Frame = Instance.new("Frame")
local TextLabel = Instance.new("TextLabel")

-- Properties:
ScreenGui.Name = "OpponentMoveTracker"
ScreenGui.ResetOnSpawn = false
ScreenGui.Parent = PlayerGui2 -- Parent last after setup

Frame.Name = "MoveDisplayFrame"
Frame.Parent = ScreenGui
Frame.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Frame.BackgroundTransparency = 0 -- Assuming you want a white background
Frame.BorderColor3 = Color3.fromRGB(0, 0, 0)
Frame.BorderSizePixel = 0
Frame.Position = UDim2.new(0.398564816, 0, 0.115716755, 0)
Frame.Size = UDim2.new(0.248149976, 0, 0.046632126, 0)
Frame.Visible = false -- Start hidden

TextLabel.Name = "MoveTextLabel"
TextLabel.Parent = Frame
TextLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
TextLabel.BackgroundTransparency = 1.000
TextLabel.BorderColor3 = Color3.fromRGB(0, 0, 0)
TextLabel.BorderSizePixel = 0
TextLabel.Size = UDim2.new(1, 0, 1, 0)
TextLabel.Font = Enum.Font.SourceSansBold
TextLabel.TextColor3 = Color3.fromRGB(255, 85, 0)
TextLabel.TextScaled = true
TextLabel.TextSize = 14.000 -- TextScaled overrides this, but good default
TextLabel.TextWrapped = true
TextLabel.Text = "" -- Start empty

-- Configuration: Map Animation IDs to Move Names
local moveAnimationIds = {
    ['rbxassetid://3738519606'] = 'Uppercut',
    ['rbxassetid://3738476938'] = 'Kick',
    ['rbxassetid://3738307442'] = 'Double Kick',
    ['rbxassetid://3738310509'] = 'Spin Kick',
    ['rbxassetid://6375133992'] = 'OverHand',
    ['rbxassetid://4555527945'] = '360 Uppercut',
    ['rbxassetid://3738299383'] = 'Spammer',
    ['rbxassetid://5171193156'] = 'String Cross', -- Note: Duplicate ID/Name?
}

local moveAnimationIds2 = {
    ['rbxassetid://3738213890'] = 'Grab',
    ['rbxassetid://4571278159'] = 'Grab'
}
-- Variables to cache opponent details
local opponentName = nil
local opponentPlayer = nil
local opponentCharacter = nil
local opponentHumanoid = nil
local opponentAnimator = nil
local lastDisplayedMove = nil

-- Function to find and update opponent references
local function updateOpponentReferences()
    -- Get the target opponent name (assuming this path is correct)
    local opponentNameValue = ReplicatedStorage:FindFirstChild("Stats")
    if not opponentNameValue then print("Stats folder not found in ReplicatedStorage") return false end
    opponentNameValue = opponentNameValue:FindFirstChild(LocalPlayer.Name)
    if not opponentNameValue then return false end -- Player stats not ready?
    opponentNameValue = opponentNameValue:FindFirstChild("M1V1")
    if not opponentNameValue then return false end
    opponentNameValue = opponentNameValue:FindFirstChild("E1")
    if not opponentNameValue or not opponentNameValue:IsA("StringValue") then print("E1 value not found or not a StringValue") return false end

    opponentName = opponentNameValue.Value

    if not opponentName or opponentName == "" then
        -- No opponent assigned
        return false
    end

    -- Check if the cached player is still valid
    if opponentPlayer and opponentPlayer.Parent == Players and opponentPlayer.Name == opponentName then
        -- Player reference is good, check character/humanoid/animator
        if not opponentCharacter or opponentCharacter.Parent ~= workspace then
            opponentCharacter = opponentPlayer.Character -- Might be nil if respawning
        end
        if opponentCharacter and (not opponentHumanoid or opponentHumanoid.Parent ~= opponentCharacter) then
            opponentHumanoid = opponentCharacter:FindFirstChildWhichIsA("Humanoid")
        end
        if opponentHumanoid and (not opponentAnimator or opponentAnimator.Parent ~= opponentHumanoid) then
             opponentAnimator = opponentHumanoid:FindFirstChildWhichIsA("Animator")
        end

        -- Return true if we have a valid animator to check
        return opponentAnimator ~= nil
    else
        -- Cached player is invalid or doesn't match, try to find the new one
        opponentPlayer = Players:FindFirstChild(opponentName)
        if opponentPlayer then
            opponentCharacter = opponentPlayer.Character -- Might be nil initially
            if opponentCharacter then
                opponentHumanoid = opponentCharacter:FindFirstChildWhichIsA("Humanoid")
                if opponentHumanoid then
                    opponentAnimator = opponentHumanoid:FindFirstChildWhichIsA("Animator")
                    -- Return true if we successfully found everything
                    return opponentAnimator ~= nil
                end
            end
        end
    end

    -- If we reached here, something is missing
    opponentPlayer = nil
    opponentCharacter = nil
    opponentHumanoid = nil
    opponentAnimator = nil
    return false
end


local function getplayteam()
    local player1 = game.Players:FindFirstChild(fight.E1.Value)
    local player2 = game.Players:FindFirstChild(fight.E2.Value)
    local playtab = {}
    if player1 then
        local stats = ReplicatedStorage.Stats:FindFirstChild(player1.Name)
        if stats then
            local check1 = stats.WHERE.ST.Value
            local check2 = stats.WHERE.ID.Value
            if check1 == 'PLAY' and check2 > 0 then
                table.insert(playtab,player1)
            end
        end

    end
    if player2 then
        local stats = ReplicatedStorage.Stats:FindFirstChild(player2.Name)
        if stats then
            local check1 = stats.WHERE.ST.Value
            local check2 = stats.WHERE.ID.Value
            if check1 == 'PLAY' and check2 > 0 then
                table.insert(playtab,player2)
            end
        end
    end
    return playtab
end


local function forceRotation()
    -- Double-check if the character, root part, and target part still exist and are in the workspace
    if not fight.Value == 'FIGHT' or not mychar or not mychar:IsDescendantOf(Workspace) or not mychar:FindFirstChild('HumanoidRootPart') or not opponentCharacter or not opponentCharacter:IsDescendantOf(Workspace) or not opponentCharacter:FindFirstChild('HumanoidRootPart') then
        return -- Stop if character or target is removed or invalid
    end

    -- Get current positions
    local currentPosition = mychar:FindFirstChild('HumanoidRootPart').Position
    local targetPosition = opponentCharacter:FindFirstChild('HumanoidRootPart').Position -- Get position from the PrimaryPart

    -- Calculate the position to look at (horizontal only)
    local lookAtPosition = Vector3.new(targetPosition.X, currentPosition.Y, targetPosition.Z)

    -- Check if the target is not directly above or below the player
    if (lookAtPosition - currentPosition).Magnitude > 0.1 then
        -- Create a new CFrame facing the lookAtPosition
        local newCFrame = CFrame.new(currentPosition, lookAtPosition)
        -- Apply the new CFrame to the HumanoidRootPart
        mychar:FindFirstChild('HumanoidRootPart').CFrame = newCFrame
    end
end

local connection
connection = RunService.RenderStepped:Connect(forceRotation)


local ContextActionService = game:GetService("ContextActionService")
local ACTION_DISABLE_AS = "DisableMovementKeysAction" -- New action name for W release

-- The function to sink general movement keys (A, S, T, etc.)
local function sinkInput(actionName, inputState, inputObject)
    if inputState == Enum.UserInputState.Begin then
        print(tostring(inputObject.KeyCode) .. " key press blocked by ACTION_DISABLE_AS.")
        return Enum.ContextActionResult.Sink
    end
    return Enum.ContextActionResult.Pass
end

local UserInputService = game:GetService("UserInputService")

local function isShiftLockActive()
	return UserInputService.MouseBehavior == Enum.MouseBehavior.LockCenter
end

local mt = getrawmetatable(game)
    local oldNamecall = mt.__namecall
    setreadonly(mt, false)

    mt.__namecall = newcclosure(function(self, ...)
        -- Capture the method and arguments
        local method = getnamecallmethod()
        local args = {...}
        
        -- Ensure it's the InvokeServer method and the correct RemoteFunction
        if method == "FireServer" then
            if not isShiftLockActive() then
                if self.Name == "SpecialUse" then
                    if args[1] == "Right" or args[1] == "Left" then
                        return nil
                    end
                end
            end
        end
        return oldNamecall(self, unpack(args))
    end)

    -- Set the metatable back to readonly
    setreadonly(mt, true)

print('WP - Starting Main Loop')

-- Main Loop
while wait() do -- task.wait() is preferred over wait()
    task.defer(function()
        if fight.Value == 'FIGHT' then
            if updateOpponentReferences() and opponentAnimator then
                    -- We have a valid opponent and animator, check their animations
                    local playingTracks = opponentAnimator:GetPlayingAnimationTracks()
                    local currentMoveName = nil
                    local opponentknock = game:GetService("ReplicatedStorage").Stats[opponentPlayer.Name].Knock.Value

                    local omlsdak
                    for i,v in next, playingTracks do
                        local track = v
                        local animId = track.Animation.AnimationId
                        local foundMove2 = moveAnimationIds2[animId]
                        if foundMove2 and opponentknock == 0 then
                            keyrelease(0x20)
                            ContextActionService:BindAction(
                            ACTION_DISABLE_AS,      -- Name for disabling multiple keys
                            sinkInput,              -- Function to sink presses
                            false,
                            Enum.KeyCode.Space,
                            Enum.KeyCode.R
                            )
                            omlsdak = true
                            break
                        end
                    end

                    if not omlsdak then
                        ContextActionService:UnbindAction(ACTION_DISABLE_AS)
                    end

                    -- Iterate through currently playing tracks
                    for i = #playingTracks, 1, -1 do -- Check in reverse, potentially newer tracks are added later? Not guaranteed.
                        local track = playingTracks[i]
                        local animId = track.Animation.AnimationId
                        local foundMove = moveAnimationIds[animId]
                        if foundMove then
                            currentMoveName = foundMove
                            break -- Found a relevant move, use this one
                        end
                    end

                    

                    

                    -- Update the display only if the move has changed
                    if currentMoveName ~= lastDisplayedMove then
                        if currentMoveName then
                            TextLabel.Text = currentMoveName
                            Frame.Visible = true
                            --print("Displaying move:", currentMoveName) -- Debug print
                        else
                            TextLabel.Text = ""
                            Frame.Visible = false
                            --print("Clearing move display") -- Debug print
                        end
                        lastDisplayedMove = currentMoveName
                    end
                

            else
                -- Opponent not found or references invalid, ensure UI is hidden
                if Frame.Visible then
                    TextLabel.Text = ""
                    Frame.Visible = false
                    lastDisplayedMove = nil -- Reset last displayed move
                    --print("Opponent lost, hiding display") -- Debug print
                end
                -- Optional: Add a small delay if opponent isn't found to prevent spamming checks too fast
                -- task.wait(0.5) -- Uncomment if needed, but updateOpponentReferences should be fairly light
            end
        elseif fight.Value:find('TEAM') then
            local playtab = getplayteam()
            if playtab and #playtab > 0 then
                for i,v in next, playtab do
                    local opponentHum= v.Character:FindFirstChildWhichIsA('Humanoid')
                    local opponentAnimator2 = opponentHum:FindFirstChildWhichIsA('Animator')
                    local playingTracks = opponentAnimator2:GetPlayingAnimationTracks()
                    local opponentknock = game:GetService("ReplicatedStorage").Stats[v.Name].Knock.Value


                    local omlsdak
                    for a,b in next, playingTracks do
                        local track = b
                        local animId = track.Animation.AnimationId
                        local foundMove2 = moveAnimationIds2[animId]
                        if foundMove2 and opponentknock == 0 then
                            keyrelease(0x20)
                            ContextActionService:BindAction(
                            ACTION_DISABLE_AS,      -- Name for disabling multiple keys
                            sinkInput,              -- Function to sink presses
                            false,
                            Enum.KeyCode.Space,
                            Enum.KeyCode.R
                            )
                            omlsdak = true
                            break
                        end
                    end

                    if not omlsdak then
                        ContextActionService:UnbindAction(ACTION_DISABLE_AS)
                    end
                end
            end
        end
    end)
end

print("Script loop somehow ended") -- Should not happen in normal gameplay
