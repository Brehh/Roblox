
print("YES")
local remotelog = {}


function xd(args,remoteFunction)
    remotelog[remoteFunction.Name] = true
    for i = 1, 2 do
        coroutine.wrap(function()
            pcall(function()
                args[1] = {}
                for i,v in next,game:GetService("Workspace").Mobs:GetChildren() do
                    table.insert(args[1],v)
                end
                return remoteFunction:FireServer(unpack(args))
            end)
        end)()
    end
    remotelog[remoteFunction.Name] = nil
end

function xd2(args,remoteFunction)
    remotelog[remoteFunction.Name] = true
    for i = 1, 9 do
        coroutine.wrap(function()
            pcall(function()
                args[4] = {}
                for i,v in next,game:GetService("Workspace").Mobs:GetChildren() do
                    table.insert(args[4],v)
                end
                return remoteFunction:FireServer(unpack(args))
            end)
        end)()
    end
    remotelog[remoteFunction.Name] = nil
end

-- Get the metatable of the game
local mt = getrawmetatable(game)
local oldNamecall = mt.__namecall
setreadonly(mt, false)

mt.__namecall = newcclosure(function(self, ...)
    -- Capture the method and arguments
    local method = getnamecallmethod()
    local args = {...}
    
    -- Ensure it's the InvokeServer method and the correct RemoteFunction
    if method == "FireServer" or method == "InvokeServer" then
        if (self.Name == 'PlayerAttack' or self.Name == 'PlayerSkillAttack') and not remotelog[self.Name] then
            coroutine.wrap(function()
                    xd(args,self)
            end)()
        elseif (self.Name == 'PetDamage') and not remotelog[self.Name] then
            coroutine.wrap(function()
                    xd2(args,self)
            end)()
        end
    end
    
    -- Call the original method for any other invocations
    return oldNamecall(self, ...)
end)

-- Set the metatable back to readonly
setreadonly(mt, true)
